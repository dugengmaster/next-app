"use client";

import { Stack, Typography, SxProps, Theme, Divider, Box } from "@mui/material";
import KeyboardArrowUpIcon from "@mui/icons-material/KeyboardArrowUp";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { SideBarItemData } from "./types";
import { useSideBar } from "./SideBarContext";
import { useEffect } from "react";

interface SidebarItemProps {
  item: SideBarItemData;
}

const styles = {
  link: {
    color: "inherit",
    textDecoration: "none",
  } as React.CSSProperties,

  itemRow: {
    margin: "4px 0",
    padding: "8px",
    borderRadius: "4px",
    cursor: "pointer",
    "&:hover": {
      backgroundColor: "rgba(0, 0, 0, 0.1)",
    },
  } as SxProps<Theme>,

  activeItemRow: {
    margin: "4px 0",
    padding: "8px",
    borderRadius: "4px",
    cursor: "pointer",
    backgroundColor: "rgba(0, 0, 0, 0.15)",
    "&:hover": {
      backgroundColor: "rgba(0, 0, 0, 0.2)",
    },
  } as SxProps<Theme>,

  itemContent: {
    marginLeft: "1em",
    transition: "opacity 0.2s ease",
    whiteSpace: "nowrap",
    width: "100%",
    justifyContent: "space-between",
  } as SxProps<Theme>,

  arrowIcon: {
    cursor: "pointer",
  } as SxProps<Theme>,

  childrenWrapper: {
    display: "grid",
    transition: "grid-template-rows 0.2s ease",
  } as SxProps<Theme>,

  childrenInner: {
    overflow: "hidden",
    minHeight: 0,
  } as SxProps<Theme>,

  childrenContainer: {
    margin: "4px 0",
    padding: "0 8px 0 12px",
    transition: "opacity 0.2s ease",
  } as SxProps<Theme>,

  childrenContent: {
    width: "100%",
    minWidth: "150px",
  } as SxProps<Theme>,

  childItem: {
    margin: "2px 0",
    padding: "4px 8px",
    borderRadius: "4px",
    cursor: "pointer",
    "&:hover": {
      backgroundColor: "rgba(0, 0, 0, 0.05)",
    },
  } as SxProps<Theme>,

  activeChildItem: {
    margin: "2px 0",
    padding: "4px 8px",
    borderRadius: "4px",
    cursor: "pointer",
    backgroundColor: "rgba(0, 0, 0, 0.1)",
    "&:hover": {
      backgroundColor: "rgba(0, 0, 0, 0.15)",
    },
  } as SxProps<Theme>,

  dividerContainer: {
    width: "24px",
    display: "flex",
    justifyContent: "center",
  } as SxProps<Theme>,

  childItemText: {
    fontSize: "0.85rem",
    whiteSpace: "nowrap",
  } as SxProps<Theme>,
};

export const SideBarItem: React.FC<SidebarItemProps> = ({ item }) => {
  const pathname = usePathname();
  const { 
    isOpen, 
    expandedItems, 
    setExpandedByRoute, 
    setExpandedByArrow 
  } = useSideBar();

  const isExpanded = expandedItems.includes(item.id);
  const isActive = pathname === item.href;
  const hasActiveChild = item.children?.some((child) => pathname === child.href) || false;

  // 處理主項目點擊
  const handleMainItemClick = () => {
    if (item.children && item.children.length > 0) {
      // 如果有子項目，同時導航並展開
      setExpandedByRoute(item.id);
    }
  };

  // 處理箭頭點擊
  const handleArrowClick = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setExpandedByArrow(item.id);
  };

  return (
    <>
      <Link href={item.href} style={styles.link} onClick={handleMainItemClick}>
        <Stack 
          direction="row" 
          sx={isActive || hasActiveChild ? styles.activeItemRow : styles.itemRow}
        >
          {item.icon}
          <Stack
            direction="row"
            sx={{
              ...styles.itemContent,
              opacity: isOpen ? 1 : 0,
              transitionDelay: isOpen ? "0.1s" : "0s",
            }}
          >
            <Typography>{item.label}</Typography>
            {item.children && item.children.length > 0 && (
              <KeyboardArrowUpIcon
                sx={{
                  ...styles.arrowIcon,
                  transform: isExpanded
                    ? "rotate(180deg) scale(1.1)"
                    : "rotate(0deg) scale(1)",
                  transition: "transform 0.3s ease",

                  "&:hover": {
                    transform: isExpanded
                      ? "rotate(180deg) scale(1.2)"
                      : "rotate(0deg) scale(1.1)",
                  },
                  "&:active": {
                    transform: isExpanded
                      ? "rotate(180deg) scale(0.9)"
                      : "rotate(0deg) scale(0.9)",
                  },
                }}
                onClick={handleArrowClick}
              />
            )}
          </Stack>
        </Stack>
      </Link>

      {item.children && item.children.length > 0 && (
        <Box
          sx={{
            ...styles.childrenWrapper,
            gridTemplateRows: isOpen && isExpanded ? "1fr" : "0fr",
            transitionDelay: isOpen ? "0.1s" : "0s",
          }}
        >
          <Box sx={styles.childrenInner}>
            <Stack
              direction="row"
              sx={{
                ...styles.childrenContainer,
                opacity: isOpen && isExpanded ? 1 : 0,
                visibility: isOpen && isExpanded ? "visible" : "hidden",
              }}
            >
              <Box sx={styles.dividerContainer}>
                <Divider orientation="vertical" />
              </Box>

              <Stack sx={styles.childrenContent}>
                {item.children.map((child, index) => {
                  const isChildActive = pathname === child.href;
                  return (
                    <Link key={index} href={child.href} style={styles.link}>
                      <Stack sx={isChildActive ? styles.activeChildItem : styles.childItem}>
                        <Typography variant="body2" sx={styles.childItemText}>
                          {child.label}
                        </Typography>
                      </Stack>
                    </Link>
                  );
                })}
              </Stack>
            </Stack>
          </Box>
        </Box>
      )}
    </>
  );
};