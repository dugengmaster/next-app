"use client";

import { Stack, Typography, SxProps, Theme, Divider, Box } from "@mui/material";
import KeyboardArrowUpIcon from "@mui/icons-material/KeyboardArrowUp";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { SideBarItemData } from "./types";
import { useState, useEffect } from "react";

interface SidebarItemProps {
  item: SideBarItemData;
  isOpen: boolean;
}

const styles = {
  link: {
    color: "inherit",
    textDecoration: "none",
  } as React.CSSProperties,
  itemRow: {
    margin: "4px 0",
    padding: "8px",
    borderRadius: "4px",
    cursor: "pointer",
    "&:hover": {
      backgroundColor: "rgba(0, 0, 0, 0.1)",
    },
  } as SxProps<Theme>,
  itemContent: (isOpen: boolean): SxProps<Theme> => ({
    marginLeft: "1em",
    opacity: isOpen ? 1 : 0,
    transition: "opacity 0.2s ease",
    transitionDelay: isOpen ? "0.1s" : "0s",
    whiteSpace: "nowrap",
    width: "100%",
    justifyContent: "space-between",
  }),
  arrowIcon: (isCurrentSection: boolean): SxProps<Theme> => ({
    transform: isCurrentSection
      ? "rotate(180deg) scale(1.1)"
      : "rotate(0deg) scale(1)",
    transition: "transform 0.3s ease",
    cursor: "pointer",
    "&:hover": {
      transform: isCurrentSection
        ? "rotate(180deg) scale(1.2)"
        : "rotate(0deg) scale(1.1)",
    },
    "&:active": {
      transform: isCurrentSection
        ? "rotate(180deg) scale(0.9)"
        : "rotate(0deg) scale(0.9)",
    },
  }),
  childrenContainer: (showChildren: boolean): SxProps<Theme> => ({
    margin: "4px 0",
    padding: "0 8px",
    opacity: showChildren ? 1 : 0,
    transform: showChildren ? "translateY(0)" : "translateY(-10px)",
    transition: "opacity 0.1s ease, transform 0.1s ease",
    transitionDelay: showChildren ? "0.3s" : "0s",
  }),
  childItem: {
    margin: "2px 0",
    padding: "4px 8px",
    borderRadius: "4px",
    cursor: "pointer",
    "&:hover": {
      backgroundColor: "rgba(0, 0, 0, 0.05)",
    },
  } as SxProps<Theme>,
};

export const SideBarItem: React.FC<SidebarItemProps> = ({ item, isOpen }) => {
  const pathname = usePathname();
  const [shouldRenderChildren, setShouldRenderChildren] = useState(false);
  const [showChildrenAnimation, setShowChildrenAnimation] = useState(false);

  const isActive = pathname === item.href;
  const hasActiveChild =
    item.children?.some((child) => pathname === child.href) || false;
  const isCurrentSection = isActive || hasActiveChild;

  // 控制子路由的渲染時機
  useEffect(() => {
    if (isOpen && isCurrentSection) {
      // Drawer 開啟時，等待動畫完成後再渲染子路由
      const renderTimer = setTimeout(() => {
        setShouldRenderChildren(true);
        // 再等一小段時間後開始動畫
        setTimeout(() => {
          setShowChildrenAnimation(true);
        }, 0);
      }, 100); // 等待 Drawer 動畫完成 (0.3s)

      return () => clearTimeout(renderTimer);
    } else {
      // Drawer 關閉時立即隱藏
      setShowChildrenAnimation(false);
      const hideTimer = setTimeout(() => {
        setShouldRenderChildren(false);
      }, 0); // 等待隱藏動畫完成

      return () => clearTimeout(hideTimer);
    }
  }, [isOpen, isCurrentSection]);

  return (
    <>
      <Link href={item.href} style={styles.link}>
        <Stack direction="row" sx={styles.itemRow}>
          {item.icon}
          <Stack direction="row" sx={styles.itemContent(isOpen)}>
            <Typography>{item.label}</Typography>
            {item.children && item.children.length > 0 && (
              <KeyboardArrowUpIcon sx={styles.arrowIcon(isCurrentSection)} />
            )}
          </Stack>
        </Stack>
      </Link>

      {item.children &&
        item.children.length > 0 &&
        shouldRenderChildren && (
          <Stack direction="row" sx={styles.childrenContainer(showChildrenAnimation)}>
            <Box
              sx={{
                width: "24px",
                display: "flex",
                justifyContent: "center",
              }}
            >
              <Divider orientation="vertical" />
            </Box>

            <Stack sx={{ width: "100%" }}>
              {item.children.map((child, index) => (
                <Link key={index} href={child.href} style={styles.link}>
                  <Stack sx={styles.childItem}>
                    <Typography variant="body2" sx={{ fontSize: "0.85rem" }}>
                      {child.label}
                    </Typography>
                  </Stack>
                </Link>
              ))}
            </Stack>
          </Stack>
        )}
    </>
  );
};